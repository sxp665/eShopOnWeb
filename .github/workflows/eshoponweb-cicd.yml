name: eShopOnWeb Build and Test

#Triggers (uncomment line below to use it)
#on: [push, workflow_dispatch]

#Environment variables https://docs.github.com/en/actions/learn-github-actions/environment-variables
env:
  RESOURCE-GROUP: rg-az400-eshoponweb-NAME
  LOCATION: westeurope
  TEMPLATE-FILE: .azure/bicep/webapp.bicep
  SUBSCRIPTION-ID: YOUR-SUBS-ID
  WEBAPP-NAME: az400-webapp-NAME


jobs:
  #Build, test and publish .net web project in repository
  buildandtest:
    runs-on: ubuntu-latest
    steps:
    #checkout the repository
    - uses: actions/checkout@v2
    #prepare runner for desired .net version SDK
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x'
        include-prerelease: true
    #Build/Test/Publish the .net project
    - name: Build with dotnet
      run: dotnet build ./eShopOnWeb.sln --configuration Release
    - name: Test with dotnet
      run: dotnet test ./eShopOnWeb.sln --configuration Release
    - name: dotnet publish
      run: dotnet publish ./src/Web/Web.csproj -c Release -o ${{env.DOTNET_ROOT}}/myapp
    # upload the published website code artifacts
    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v3
      with:
        name: .net-app
        path: ${{env.DOTNET_ROOT}}/myapp
        
    # upload the bicep template as artifacts for next job
    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v3
      with:
        name: bicep-template
        path: ${{ env.TEMPLATE-FILE }}
        
  # Use Bicep to deploy infrastructure + Publish webapp 
  deploy:
    runs-on: ubuntu-latest
    needs: buildandtest
    environment:
      name: 'Development'
    steps:
    
    #Download the publish files created in previous job
    - name: Download artifact from build job
      uses: actions/download-artifact@v3
      with:
        name: .net-app
        path: .net-app
  
    #Download the bicep templates from previous job
    - name: Download artifact from build job
      uses: actions/download-artifact@v3
      with:
        name: bicep-template
        path: bicep-template
        
   #Login in your azure subscription using a service principal (credentials stored as GitHub Secret in repo)
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
           
    # Deploy Azure WebApp using Bicep file
    - name: deploy
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ env.SUBSCRIPTION-ID }}
        resourceGroupName: ${{ env.RESOURCE-GROUP }}
        template: bicep-template/webapp.bicep
        parameters: 'webAppName=${{ env.WEBAPP-NAME }} location=${{ env.LOCATION }}'
        failOnStdErr: false   
    
    # Publish website to Azure App Service (WebApp)
    - name: Publish Website to WebApp
      uses: Azure/webapps-deploy@v2
      with:
        app-name: ${{ env.WEBAPP-NAME  }}
        package: .net-app
        name: SonarCloud
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"sxp665_eShopOnWeb" /o:"sxp665" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          <insert_your_build_command>
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
   
